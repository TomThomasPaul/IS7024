@page
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq;

@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var likedRecipes = (List<JObject>)ViewData["LikedRecipes"];





}

@section Styles {

    <link rel="stylesheet" href="~/css/customStyle.css" />
}



@{
    var iconString = "icon-heart-outlined";
    decimal page = 1;
    decimal resPerPage = 10;
    int start;
    int end;
    @if (likedRecipes != null)
    {
        var currentRecipeId = Model.Recipe.RecipeId;
        var likedRecipe = likedRecipes.Find(recipe => recipe["id"].ToString().Equals(currentRecipeId));
        if (likedRecipe != null) { iconString = "icon-heart"; };
    }

    <html>

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <link href="https://fonts.googleapis.com/css?family=Nunito+Sans:400,600,700" rel="stylesheet">
        @*<link rel="stylesheet" href="css/style.css">*@
        <link rel="shortcut icon" href="img/favicon.png" type="image/x-icon">
        <title>MomsSpaghetti</title>
    </head>

    <body>
        <div class="_container">
            <header class="header">
                <img src="~/img/logo_transparent.png" alt="Logo" class="header__logo">
                <form class="search" method="post">
                    <input type="text" class="search__field" asp-for="SearchRecipes.Query" placeholder="Search over 1,000,000 recipes...">
                    <button class="btn search__btn" type="submit">
                        <svg class="search__icon">
                            <use href="img/icons.svg#icon-magnifying-glass"></use>
                        </svg>
                        <span>Search</span>
                    </button>

                </form>

                <div class="likes">
                    <div class="likes__field">
                        <svg class="likes__icon">
                            <use href="img/icons.svg#icon-heart"></use>
                        </svg>
                    </div>

                    <div class="likes__panel">
                        <ul class="likes__list">
                            @if (likedRecipes != null)
                            {


                                @foreach (var recipe in likedRecipes)
                                {
                                    <li>
                                        <a class="likes__link" href="#@recipe["id"]">
                                            <figure class="likes__fig">
                                                <img src="@recipe["image"]" alt="Test">
                                            </figure>
                                            <div class="likes__data">
                                                <h4 class="likes__name">@recipe["title"]</h4>
                                                <p class="likes__author">@recipe["author"]</p>
                                            </div>
                                        </a>
                                    </li>
                                }




                            }

                        </ul>
                    </div>

                </div>
            </header>


            <div class="results">

                @{if (Model.SearchRecipes.Result != null)
                    {
                        int count = 0;
                        decimal indx = Array.FindIndex(Model.SearchRecipes.Result["recipes"].ToArray(), rec=>rec["recipe_id"].ToString()==Model.Recipe.RecipeId);
                        if (indx > 0) {
                            page = Math.Ceiling(indx / resPerPage);
                            if(indx%resPerPage == 0)
                            {


                                page = page + 1;
                            }

                            start = Convert.ToInt32((page - 1) * resPerPage);



                            end = Math.Min(Convert.ToInt32(start + resPerPage - 1), Model.SearchRecipes.Result["recipes"].Count()-1);

                        }
                        else
                        {

                            start = 0;
                            end = Math.Min(Convert.ToInt32(resPerPage - 1),Model.SearchRecipes.Result["recipes"].Count()-1);
                            page = 1;
                        }


                                <ul class="results__list">

                                   



                                    @*@foreach (var recipe in Model.SearchRecipes.Result["recipes"])*@
                                    @for (var i = start; i <= end; i++)
                                    {
                                        var recipe = Model.SearchRecipes.Result["recipes"][i];
                                        <li>
                                            <a class="results__link results__link--active" href="?recipeId=@recipe["recipe_id"]">
                                                <figure class="results__fig">
                                                    <img src="@recipe["image_url"]" alt="Test">
                                                </figure>
                                                <div class="results__data">
                                                    <h4 class="results__name">@recipe["title"]</h4>
                                                    <p class="results__author">@recipe["publisher"]</p>
                                                </div>
                                            </a>
                                        </li>

                                        count++;
                                        if (count == 10) break;
                                    }









                                </ul>

                                <div class="results__pages">
                                    @if (page != 1)
                                    {

                                        <button class="btn-inline results__btn--prev" data-goto=@(page-1)>
                                            <svg class="search__icon">
                                                <use href="img/icons.svg#icon-triangle-left"></use>
                                            </svg>
                                            <span>Page @(page-1)</span>
                                        </button>

                                    }

                                    @if (page!= Math.Ceiling(Model.SearchRecipes.Result["recipes"].Count()/resPerPage))
                                    {

                                        <button class="btn-inline results__btn--next" data-goto=@(page+1)>
                                            <span>Page @(page+1)</span>
                                            <svg class="search__icon">
                                                <use href="img/icons.svg#icon-triangle-right"></use>
                                            </svg>
                                        </button>


                                    }


                                </div>

                        }
                    }


                    </div>

                    <div class="recipe">
                        @if (Model.Recipe.Title != null)
                        {






                            <figure class="recipe__fig">
                                <img src="@Model.Recipe.Image" alt="@Model.Recipe.Image" class="recipe__img">
                                <h1 class="recipe__title">
                                    <span>@Model.Recipe.Title</span>
                                </h1>
                            </figure>
                            <div class="recipe__details">
                                <div class="recipe__info">
                                    <svg class="recipe__info-icon">
                                        <use href="img/icons.svg#icon-stopwatch"></use>
                                    </svg>
                                    <span class="recipe__info-data recipe__info-data--minutes">@Model.Recipe.CookingTime</span>
                                    <span class="recipe__info-text"> minutes</span>
                                </div>
                                <div class="recipe__info">
                                    <svg class="recipe__info-icon">
                                        <use href="img/icons.svg#icon-man"></use>
                                    </svg>
                                    <span class="recipe__info-data recipe__info-data--people">4</span>
                                    <span class="recipe__info-text"> servings</span>

                                    <div class="recipe__info-buttons">
                                        <button class="btn-tiny btn-decrease">
                                            <svg>
                                                <use href="img/icons.svg#icon-circle-with-minus"></use>
                                            </svg>
                                        </button>
                                        <button class="btn-tiny btn-increase">
                                            <svg>
                                                <use href="img/icons.svg#icon-circle-with-plus"></use>
                                            </svg>
                                        </button>
                                    </div>

                                </div>

                                <button class="recipe__love">
                                    <svg class="header__likes">
                                        <use href="img/icons.svg#@iconString"></use>
                                    </svg>
                                </button>
                            </div>


                            <div class="recipe__ingredients">
                                <ul class="recipe__ingredient-list">
                                    @if (Model.Recipe.Ingredients != null)
                                    {

                                        @foreach (var ingredient in Model.Recipe.Ingredients)
                                        {
                                            <li class="recipe__item">
                                                <svg class="recipe__icon">
                                                    <use href="img/icons.svg#icon-check"></use>
                                                </svg>
                                                <div class="recipe__ingredient">
                                                    <p>@ingredient.ToString()</p>

                                                </div>

                                            </li>

                                        }

                                    }





                                </ul>




                                <button class="btn-small recipe__btn">
                                    <svg class="search__icon">
                                        <use href="img/icons.svg#icon-shopping-cart"></use>
                                    </svg>
                                    <span>Add to shopping list</span>
                                </button>
                            </div>

                            <div class="recipe__directions">
                                <h2 class="heading-2">How to cook it</h2>
                                <p class="recipe__directions-text">
                                    This recipe was carefully designed and tested by
                                    <span class="recipe__by">@Model.Recipe.Author</span>. Please check out directions at their website.
                                </p>
                                <a class="btn-small recipe__btn" href="@Model.Recipe.Url" target="_blank">
                                    <span>Directions</span>
                                    <svg class="search__icon">
                                        <use href="img/icons.svg#icon-triangle-right"></use>
                                    </svg>

                                </a>
                            </div>













                        }


                    </div>



                    <div class="shopping">
                        <h2 class="heading-2">My Shopping List</h2>

                        <ul class="shopping__list">

                            <!--
                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="500" step="100">
                            <p>g</p>
                        </div>
                        <p class="shopping__description">Pasta</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>

                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="0.5" step="0.1">
                            <p>cup</p>
                        </div>
                        <p class="shopping__description">Ricotta cheese</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>

                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="3.5" step="0.1">
                            <p>tbsp</p>
                        </div>
                        <p class="shopping__description">Toasted almond slices</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>

                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="0.5" step="0.1">
                            <p>tbsp</p>
                        </div>
                        <p class="shopping__description">Sea salt</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>

                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="0.25" step="0.1">
                            <p>cup</p>
                        </div>

                        <p class="shopping__description">Minced green onions</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>

                    <li class="shopping__item">
                        <div class="shopping__count">
                            <input type="number" value="45" step="10">
                            <p>g</p>
                        </div>
                        <p class="shopping__description">Sesame seeds</p>
                        <button class="shopping__delete btn-tiny">
                            <svg>
                                <use href="img/icons.svg#icon-circle-with-cross"></use>
                            </svg>
                        </button>
                    </li>
                    -->
                        </ul>

                        <div class="copyright">
                            &copy; MomsSpaghetti

                        </div>

                    </div>
                </div>



        @section Scripts{


                <script>

                    let searchResults = {};

                    $.fn.toggleLikeBtn = function (isLiked) {
                        let iconString = isLiked ? 'icon-heart' : 'icon-heart-outlined';

                        $(`.recipe__love use`).attr('href', `img/icons.svg#${iconString}`);


                    };
                    $.fn.addLike = function () {
                       // if(likes.length==0) {

                        console.log("begginning of addlike");
                        var likedRecipeId = `@Model.Recipe.RecipeId`;
                        var  likedImage= `@Model.Recipe.Image`;
                        var likedAuthor = `@Model.Recipe.Author`;
                        var likedTitle = `@Model.Recipe.Title`;

                        var newLike = {

                            id: likedRecipeId,
                            image: likedImage,
                            author: likedAuthor,
                            title: likedTitle

                        }

                        $.ajax({
                            type: "POST",
                            url: "/Index?handler=Send",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("XSRF-TOKEN",
                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            data: JSON.stringify(newLike),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                console.log(response);
                                var responseObjectArray = JSON.parse(response);
                               // likesArray = responseObjectArray;
                                console.log(responseObjectArray);
                                console.log("inside addlike");

                                $.fn.renderLike(responseObjectArray[responseObjectArray.length - 1]);
                                $.fn.toggleLikeBtn(true);
                            },
                            failure: function (response) {
                                alert(response);
                            }
                        });

                        console.log("end of addlike");
                            return newLike;


                      //  }


                    };
                    $.fn.renderLike = function (like) {
                        console.log(like.id);
                        console.log("inside renderLike");
                        var markup = `<li>
                            <a class="likes__link" href="#${like.id}">
                                <figure class="likes__fig">
                                    <img src="${like.image}" alt="${like.title}">
                                </figure>
                                <div class="likes__data">
                                    <h4 class="likes__name">${like.title}</h4>
                                    <p class="likes__author">${like.author}</p>
                                </div>
                            </a>
                        </li>`;





                        $(".likes__list").append(markup);


                    };

                    $.fn.deleteLike = function (likeFound) {
                        console.log("entered delete like");
                        $.ajax({
                            type: "POST",
                            url: "/Index?handler=DeleteLiked",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("XSRF-TOKEN",
                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            data: JSON.stringify(likeFound),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (response) {

                                var responseObjectArray = JSON.parse(response);



                                $(".likes__list").empty();
                                for (var i = 0; i < responseObjectArray.length; i++) {

                                    $.fn.renderLike(responseObjectArray[i]);
                                }
                                $.fn.toggleLikeBtn(false);

                            },
                            failure: function (response) {

                            }
                        });



                    };


                    $.fn.updateServings = function (action) {
                        //console.log("Clicked decrease");
                        let servingsInit = $(".recipe__info-data--people").text();
                        let servingsNew = 0;

                        servingsInit = parseFloat(servingsInit);
                        if (action == "decrease") {
                            servingsNew = servingsInit - 1;
                        } else {

                            servingsNew = servingsInit + 1;
                        }

                        $(".recipe__info-data--people").text(servingsNew.toString());
                        let first = 0;
                        let second = 0;
                        let sum = 0;

                       // console.log(servings);

                        let ingredients = Array.from($(".recipe__ingredient-list").children().find(".recipe__ingredient"));
                        let fracArr = [["1/4", 0.25], ["1/3", 0.3], ["1/2",0.5], ["3/4",0.75]];

                      let updatedIngredients=  ingredients.map(ing => {
                           // console.log(ing.innerText);
                          let ingArr = ing.innerText.toString().split(" ");
                         // console.log(ingArr);
                          if ( (parseFloat(ingArr[0]))!==NaN) {
                              first = servingsNew / servingsInit * parseFloat(ingArr[0]);
                              console.log(ingArr[0]);
                              console.log("first is " + first);
                          }
                          let hasFrac = false;
                            fracArr.forEach(frac => {

                                if (frac[0] == ingArr[1]) {
                                    hasFrac = true;
                                   // console.log(ingArr[1]);
                                    second = servingsNew/servingsInit * frac[1];
                                    sum = first + second;
                                    sum = sum.toFixed(2);
                                    console.log("sum is " + sum);
                                    ingArr.shift();
                                   // console.log(ingArr[0]);
                                    ingArr[0] = sum;


                                }
                            })
                          if (!hasFrac) {
                              first = first.toFixed(2);
                              console.log("first after fix is " + first);
                              ingArr[0] = first;
                          }
                          return ingArr.join(" ");

                        })


                       // console.log(updatedIngredients);
                        return updatedIngredients;


                    };

                    $.fn.updateIngreds = function (ingredients) {
                        $(".recipe__ingredient-list").empty();
                        console.log("entered render ing");

                        ingredients.forEach(ingredient => {

                            console.log(ingredient);
                            $(".recipe__ingredient-list").append(`<li class="recipe__item">
                                        <svg class="recipe__icon">
                                            <use href="img/icons.svg#icon-check"></use>
                                        </svg>
                                        <div class="recipe__ingredient">
                                            <p>${ingredient.toString()}</p>

                                        </div>

                                    </li>`);



                        });




                    }

                    $.fn.renderRecipe = function(recipe){
                        const markup = `<li>
                    <a class="results__link results__link--active" href="?recipeId=${recipe.recipe_id}">
                        <figure class="results__fig">
                            <img src="${recipe.image_url}" alt="${recipe.title}">
                        </figure>
                        <div class="results__data">
                            <h4 class="results__name">${recipe.title}</h4>
                            <p class="results__author">${recipe.publisher}</p>
                        </div>
                    </a>
                </li>`;


                        
                        $(".results__list").append(markup);




                    };


                    $.fn.createButton = function (page,type) {


                     return `<button class="btn-inline results__btn--${type}" data-goto=${type === 'prev' ? page - 1 : page + 1}>
                       <span>Page ${type === 'prev' ? page - 1 : page + 1}</span>
                       <svg class="search__icon">
                        <use href="img/icons.svg#icon-triangle-${type === 'prev' ? 'left' : 'right'}"></use>
                       </svg>
                    </button>`

                    }

                    $.fn.renderResults = function (recipes,page = 1, resPerPage = 10) {


                        const start = (page - 1) * resPerPage;
                        const end = page * resPerPage;
                        $(".results__list").empty();
                        recipes.slice(start, end).forEach(recipe => {
                            $.fn.renderRecipe(recipe);
                        });//just tneed to pass the function for foreach


                        let button;
                        const pages = Math.ceil(recipes.length / resPerPage);

                        if (page === 1 && pages > 1) {

                            //button go to next page
                            button = $.fn.createButton(page, 'next');
                        }
                        else if (page < pages) {

                            //both buttons
                            button = `${$.fn.createButton(page, 'prev')}${$.fn.createButton(page, 'next')}`;
                        }

                        else if (page === pages) {

                            //go to prev page
                            button = $.fn.createButton(page, 'prev');
                        }


                        $(".results__pages").empty();
                        $(".results__pages").append(button);












                            
                          

                      


                    }



                    $(document).ready(function () {

                    //nextpage

                        $(".results__pages").click(async function (e) {

                            if (!searchResults.recipes) {

                          var result =   await  $.ajax({
                                type: "GET",
                                url: "/Index?handler=SearchResults",
                                //data: {"recipeId" : `@Model.Recipe.RecipeId` },
                                contentType: "application/json",
                                dataType: "json"
                              /*  success: function (response) {


                                    searchResults = JSON.parse(response);
                                    console.log(searchResults);
                                

                                    //if (response == "false") {
                                    //    var newLike = $.fn.addLike();


                                    //} else {

                                    //    $.fn.deleteLike(JSON.parse(response));
                                    //}

                                },
                                failure: function (response) {
                                    alert(response);
                                }*/
                            });

                                searchResults = JSON.parse(result);


                            }
                            
                            console.log(searchResults);

                            let btn = e.target.closest(`.btn-inline`);
                            let goToPage = parseInt($(btn).data("goto"), 10);
                            console.log("clicked");
                            $.fn.renderResults(searchResults.recipes, goToPage);


                        });

                       //update servings

                        $(".btn-decrease").click(function () {

                            let ingredients = $.fn.updateServings("decrease");
                            $.fn.updateIngreds(ingredients);


                        });
                        $(".btn-increase").click(function () {

                            let ingredients =  $.fn.updateServings("increase");
                            $.fn.updateIngreds(ingredients);

                        });
                        //validate empty search
                        $(".search__btn").click(function (event) {

                           if ($(".search__field").val() == "") {

                               alert("Enter a value in the Search Field");


                               event.preventDefault();


                            }

                        });


                        $(".recipe__love").click(function () {


                            //call ajax to check if recipe already liked
                            $.ajax({
                                type: "GET",
                                url: "/Index?handler=Liked",
                                data: {"recipeId" : `@Model.Recipe.RecipeId` },
                                contentType: "application/x-www-form-urlencoded",
                                dataType: "json",
                                success: function (response) {
                                    console.log(response);

                                    if (response == "false") {
                                        var newLike = $.fn.addLike();


                                    } else {

                                        $.fn.deleteLike(JSON.parse(response));
                                    }

                                },
                                failure: function (response) {
                                    alert(response);
                                }
                            });


                        });






                    })


                </script>
        }




    </body>

</html>




}